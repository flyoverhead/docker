---
# Restart systemd-resolved service
- name: Restart systemd-resolved service
  become: true
  ansible.builtin.service:
    name: "systemd-resolved"
    state: "started"
    enabled: true
    daemon_reload: true

# Start pihole service
- name: Start pihole service
  community.docker.docker_compose:
    project_src: "{{ service_root_path }}/{{ pihole_name }}"
    state: present
  register: pihole_service
  retries: 5
  delay: 10
  until: pihole_service.services[pihole_name][pihole_name].state.running
  notify:
    - Check pihole service

# Restart pihole service
- name: Restart pihole service
  community.docker.docker_compose:
    project_src: "{{ service_root_path }}/{{ pihole_name }}"
    state: present
    restarted: true
  notify:
    - Check pihole service

# Check pihole service
- name: Check pihole service
  ansible.builtin.uri:
    url: "http://{{ ansible_host }}:{{ pihole_web_port }}"
    method: GET
    status_code: 200
  register: pihole_status
  until: pihole_status.status == 200
  retries: 3
  delay: 30

# Clean previous pihole domain blacklist
- name: Clean pihole blacklist
  become: true
  ansible.builtin.command:
    cmd: sqlite3 {{ service_root_path }}/{{ pihole_name }}/data/gravity.db "DELETE FROM domainlist WHERE type='3'"

# Create pihole domain blacklist
- name: Configure pihole domain blacklist
  become: true
  ansible.builtin.command:
    cmd: >-
      sqlite3 {{ service_root_path }}/{{ pihole_name }}/data/gravity.db
      "INSERT INTO domainlist (type, domain, enabled, comment) VALUES (3, '{{ item }}', 1, '')"
  loop: "{{ lookup('file', 'domain_black.list').splitlines() }}"
  register: result
  failed_when: result.rc > 0 and result.rc != 19

# Clean previous pihole domain whitelist
- name: Clean pihole whitelist
  become: true
  ansible.builtin.command:
    cmd: sqlite3 {{ service_root_path }}/{{ pihole_name }}/data/gravity.db "DELETE FROM domainlist WHERE type='2'"

# Create pihole domain whitelist
- name: Configure pihole domain whitelist
  become: true
  ansible.builtin.command:
    cmd: >-
      sqlite3 {{ service_root_path }}/{{ pihole_name }}/data/gravity.db
      "INSERT INTO domainlist (type, domain, enabled, comment) VALUES (2, '{{ item }}', 1, '')"
  loop: "{{ lookup('file', 'domain_white.list').splitlines() }}"
  register: result
  failed_when: result.rc > 0 and result.rc != 19

# Create pihole adlist
- name: Configure pihole adlist
  become: true
  ansible.builtin.command:
    cmd: >-
      sqlite3 {{ service_root_path }}/{{ pihole_name }}/data/gravity.db
      "INSERT INTO adlist (address, enabled, comment) VALUES ('{{ item }}', 1, '')"
  loop: "{{ lookup('file', 'adlist.list').splitlines() }}"
  register: result
  failed_when: result.rc > 0 and result.rc != 19

# Update pihole gravity database
- name: Update pihole gravity
  community.docker.docker_container_exec:
    container: "{{ pihole_name }}"
    command: /bin/sh -c "pihole -g"
